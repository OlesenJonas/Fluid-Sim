//buoyancy shader

#version 450

layout(local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

#ifndef FORMAT
    #define FORMAT rgba16f
#endif

uniform layout (binding = 0) sampler3D velocityIn;
uniform layout (binding = 1) sampler3D density;
uniform layout (binding = 2) sampler3D temperature;
uniform layout(FORMAT, binding = 0) writeonly restrict image3D velocityOut;

layout (std140, binding = 10) uniform timeData
{
    float deltaTime;
};

//todo: make parameter uniform 
// const float kappa = 0.05; //smoke weight
const float kappa = 0.0; //smoke weight
const float sigma = 1.0; //buoyancy scale
const float ambientTemp = 0;

void main() 
{
    ivec3 texelPos = ivec3(gl_GlobalInvocationID);
    ivec3 textureSize = imageSize(velocityOut);
    if(texelPos.x < textureSize.x 
    && texelPos.y < textureSize.y
    && texelPos.z < textureSize.z
    )
    {
        vec3 uvw = (vec3(texelPos)+0.5)/vec3(textureSize);

        vec3 vel = texelFetch(velocityIn, texelPos, 0).xyz;
        float temp = texelFetch(temperature, texelPos, 0).x;
        float dens = texelFetch(density, texelPos, 0).x;

        vec3 buoyantForce = (-kappa*dens + sigma*(temp - ambientTemp))*vec3(0,1,0);

        vel += buoyantForce*deltaTime;
        imageStore(velocityOut, texelPos, vec4(vel, 0));
    }
}
