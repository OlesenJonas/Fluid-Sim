#version 450

layout(local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

uniform layout(rgba32f, binding = 0) writeonly restrict image2D velocityTex;

#define M_PI   3.14159265358979323846264338327950288

// from: https://www.jcgt.org/published/0009/03/02/paper.pdf
// (Hash Functions for GPU Rendering, JCGT '20)
uvec3 pcg3d(uvec3 v)
{
    v = v * 1664525u + 1013904223u;
    v.x += v.y*v.z; v.y += v.z*v.x; v.z += v.x*v.y;
    v ^= v >> 16u;
    v.x += v.y*v.z; v.y += v.z*v.x; v.z += v.x*v.y;
    return v;
}

vec3 fpcg3d_state(inout uvec3 seed)
{
    seed = pcg3d(seed);
    return vec3(seed)/0xFFFFFFFFu;
}

vec3 fpcg3d(uvec3 seed)
{
    return vec3(pcg3d(seed))/0xFFFFFFFFu;
}


void main() 
{
    ivec2 texelPos = ivec2(gl_GlobalInvocationID.xy);
    ivec2 textureSize = imageSize(velocityTex);
    if(texelPos.x < textureSize.x 
    && texelPos.y < textureSize.y
    )
    {
        vec2 normCoord = vec2(texelPos+0.5)/vec2(textureSize);

        vec3 pos = vec3(normCoord,0.0) * 11;

        //grid based, smoothly interpolated random vectors
        
        //lower-left-back
        vec3 fp = fract(pos);

        //back
        vec3 llb = floor(pos);
        vec3 llv = normalize(fpcg3d(uvec3(llb))-0.5);
        vec3 lr = llb + vec3(1,0,0);
        vec3 lrv = normalize(fpcg3d(uvec3(lr))-0.5);
        vec3 ul = llb + vec3(0,1,0);
        vec3 ulv = normalize(fpcg3d(uvec3(ul))-0.5);
        vec3 ur = llb + vec3(1,1,0);
        vec3 urv = normalize(fpcg3d(uvec3(ur))-0.5);
        vec3 l = llv + (ulv - llv) * smoothstep(0, 1, fp.y);
        vec3 r = lrv + (urv - lrv) * smoothstep(0, 1, fp.y);
        vec3 vb = l + (r - l) * smoothstep(0, 1, fp.x);

        //front
        vec3 llf = floor(pos) + vec3(0,0,1);
        llv = normalize(fpcg3d(uvec3(llf))-0.5);
        lr = llf + vec3(1,0,0);
        lrv = normalize(fpcg3d(uvec3(lr))-0.5);
        ul = llf + vec3(0,1,0);
        ulv = normalize(fpcg3d(uvec3(ul))-0.5);
        ur = llf + vec3(1,1,0);
        urv = normalize(fpcg3d(uvec3(ur))-0.5);
        l = llv + (ulv - llv) * smoothstep(0, 1, fp.y);
        r = lrv + (urv - lrv) * smoothstep(0, 1, fp.y);
        vec3 vf = l + (r - l) * smoothstep(0, 1, fp.x);

        vec3 v = vb + (vf - vb) * smoothstep(0, 1, fp.z);

        float weight = float(length(normCoord-0.5)<0.05);
        weight = ((texelPos.x / 10) % 2) ^ ((texelPos.y / 10) % 2);

        //noisy field
        vec4 value = vec4(v, weight);

        //swirly field
        normCoord = 2*normCoord-1;
        vec2 dir =  vec2(sin(2*M_PI*normCoord.y), cos(2*M_PI*normCoord.x));
        value = vec4(dir, 0.0, weight);

        imageStore(velocityTex, texelPos, value);
    }
}
