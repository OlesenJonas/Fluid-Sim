//restrict residual to half res in each axis
//todo: handle case where axis have different sizes, eg: resolution is 1x4x4 -> only need to restrict further in Y and Z

#version 450

layout(local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

#ifndef FORMAT
    #define FORMAT r16f
#endif

uniform layout (binding = 0) sampler3D rh;
uniform layout(FORMAT, binding = 0) writeonly restrict image3D r2h;

void main() 
{
    ivec3 texelPos = ivec3(gl_GlobalInvocationID);
    ivec3 textureSize = imageSize(r2h);

    if(texelPos.x < textureSize.x 
    && texelPos.y < textureSize.y
    && texelPos.z < textureSize.z
    )
    {
        ivec3 centerCoord = 2*texelPos;

        //todo: SOOOOO MANY SAMPLES, share memory?!
        float xprev_yprev_zprev = texelFetchOffset(rh, 2*texelPos, 0, ivec3(-1,-1,-1)).x;
        float xprev_yprev_zcent = texelFetchOffset(rh, 2*texelPos, 0, ivec3(-1,-1, 0)).x;
        float xprev_yprev_znext = texelFetchOffset(rh, 2*texelPos, 0, ivec3(-1,-1, 1)).x;

        float xprev_ycent_zprev = texelFetchOffset(rh, 2*texelPos, 0, ivec3(-1, 0,-1)).x;
        float xprev_ycent_zcent = texelFetchOffset(rh, 2*texelPos, 0, ivec3(-1, 0, 0)).x;
        float xprev_ycent_znext = texelFetchOffset(rh, 2*texelPos, 0, ivec3(-1, 0, 1)).x;

        float xprev_ynext_zprev = texelFetchOffset(rh, 2*texelPos, 0, ivec3(-1, 1,-1)).x;
        float xprev_ynext_zcent = texelFetchOffset(rh, 2*texelPos, 0, ivec3(-1, 1, 0)).x;
        float xprev_ynext_znext = texelFetchOffset(rh, 2*texelPos, 0, ivec3(-1, 1, 1)).x;

        
        float xcent_yprev_zprev = texelFetchOffset(rh, 2*texelPos, 0, ivec3( 0,-1,-1)).x;
        float xcent_yprev_zcent = texelFetchOffset(rh, 2*texelPos, 0, ivec3( 0,-1, 0)).x;
        float xcent_yprev_znext = texelFetchOffset(rh, 2*texelPos, 0, ivec3( 0,-1, 1)).x;

        float xcent_ycent_zprev = texelFetchOffset(rh, 2*texelPos, 0, ivec3( 0, 0,-1)).x;
        float xcent_ycent_zcent = texelFetchOffset(rh, 2*texelPos, 0, ivec3( 0, 0, 0)).x;
        float xcent_ycent_znext = texelFetchOffset(rh, 2*texelPos, 0, ivec3( 0, 0, 1)).x;

        float xcent_ynext_zprev = texelFetchOffset(rh, 2*texelPos, 0, ivec3( 0, 1,-1)).x;
        float xcent_ynext_zcent = texelFetchOffset(rh, 2*texelPos, 0, ivec3( 0, 1, 0)).x;
        float xcent_ynext_znext = texelFetchOffset(rh, 2*texelPos, 0, ivec3( 0, 1, 1)).x;

        
        float xnext_yprev_zprev = texelFetchOffset(rh, 2*texelPos, 0, ivec3( 1,-1,-1)).x;
        float xnext_yprev_zcent = texelFetchOffset(rh, 2*texelPos, 0, ivec3( 1,-1, 0)).x;
        float xnext_yprev_znext = texelFetchOffset(rh, 2*texelPos, 0, ivec3( 1,-1, 1)).x;

        float xnext_ycent_zprev = texelFetchOffset(rh, 2*texelPos, 0, ivec3( 1, 0,-1)).x;
        float xnext_ycent_zcent = texelFetchOffset(rh, 2*texelPos, 0, ivec3( 1, 0, 0)).x;
        float xnext_ycent_znext = texelFetchOffset(rh, 2*texelPos, 0, ivec3( 1, 0, 1)).x;

        float xnext_ynext_zprev = texelFetchOffset(rh, 2*texelPos, 0, ivec3( 1, 1,-1)).x;
        float xnext_ynext_zcent = texelFetchOffset(rh, 2*texelPos, 0, ivec3( 1, 1, 0)).x;
        float xnext_ynext_znext = texelFetchOffset(rh, 2*texelPos, 0, ivec3( 1, 1, 1)).x;


        float average = 0;
        float weightOne = xprev_yprev_zprev + xprev_yprev_znext + xprev_ynext_zprev + xprev_ynext_znext
                        + xnext_yprev_zprev + xnext_yprev_znext + xnext_ynext_zprev + xnext_ynext_znext;
        
        float weightTwo = xprev_yprev_zcent + xprev_ycent_zprev + xprev_ycent_znext + xprev_ynext_zcent
                        + xcent_yprev_zprev + xcent_yprev_znext + xcent_ynext_zprev + xcent_ynext_znext
                        + xnext_yprev_zcent + xnext_ycent_zprev + xnext_ycent_znext + xnext_ynext_zcent;
        weightTwo *= 2.0;

        float weightFour = xprev_ycent_zcent + xcent_yprev_zcent + xcent_ycent_zprev + xcent_ycent_znext
                         + xcent_ynext_zcent + xnext_ycent_zcent;
        weightFour *= 4.0;

        float weightEight = xcent_ycent_zcent;
        weightEight *= 8.0;

        average = (weightOne + weightTwo + weightFour + weightEight)/64.0;

        imageStore(r2h, texelPos, vec4(average));
    }
}
