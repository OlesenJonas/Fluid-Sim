//restrict residual to half res in each axis
//todo: handle case where axis have different sizes, eg: resolution is 1x4x4 -> only need to restrict further in Y and Z

#version 450

layout(local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

#ifndef FORMAT
    #define FORMAT r16f
#endif

uniform layout (binding = 0) sampler3D rh;
uniform layout(FORMAT, binding = 0) writeonly restrict image3D r2h;

void main() 
{
    ivec3 texelPos = ivec3(gl_GlobalInvocationID);
    ivec3 texSize = imageSize(r2h);

    if(texelPos.x < texSize.x 
    && texelPos.y < texSize.y
    && texelPos.z < texSize.z
    )
    {
        ivec3 centerCoord = 2*texelPos;

        int xprev_c = centerCoord.x - 1;
        int xcent_c = centerCoord.x;
        int xnext_c = centerCoord.x + 1;

        int yprev_c = centerCoord.y - 1;
        int ycent_c = centerCoord.y;
        int ynext_c = centerCoord.y + 1;

        int zprev_c = centerCoord.z - 1;
        int zcent_c = centerCoord.z;
        int znext_c = centerCoord.z + 1;

        ivec3 texSizeh = textureSize(rh, 0);
        if(centerCoord.x == 0)
        {
            xprev_c = 1;
        }
        else if (centerCoord.x == texSizeh.x - 1)
        {
            xnext_c = xprev_c;
        }
        if(centerCoord.y == 0)
        {
            yprev_c = 1;
        }
        else if (centerCoord.y == texSizeh.y - 1)
        {
            ynext_c = yprev_c;
        }
        if(centerCoord.z == 0)
        {
            zprev_c = 1;
        }
        else if (centerCoord.z == texSizeh.z - 1)
        {
            znext_c = zprev_c - 1;
        }



        //todo: SOOOOO MANY SAMPLES, share memory?!
        float xprev_yprev_zprev = texelFetch(rh, ivec3(xprev_c, yprev_c, zprev_c), 0).x;
        float xprev_yprev_zcent = texelFetch(rh, ivec3(xprev_c, yprev_c, zcent_c), 0).x;
        float xprev_yprev_znext = texelFetch(rh, ivec3(xprev_c, yprev_c, znext_c), 0).x;

        float xprev_ycent_zprev = texelFetch(rh, ivec3(xprev_c, ycent_c, zprev_c), 0).x;
        float xprev_ycent_zcent = texelFetch(rh, ivec3(xprev_c, ycent_c, zcent_c), 0).x;
        float xprev_ycent_znext = texelFetch(rh, ivec3(xprev_c, ycent_c, znext_c), 0).x;

        float xprev_ynext_zprev = texelFetch(rh, ivec3(xprev_c, ynext_c, zprev_c), 0).x;
        float xprev_ynext_zcent = texelFetch(rh, ivec3(xprev_c, ynext_c, zcent_c), 0).x;
        float xprev_ynext_znext = texelFetch(rh, ivec3(xprev_c, ynext_c, znext_c), 0).x;

        
        float xcent_yprev_zprev = texelFetch(rh, ivec3(xcent_c, yprev_c, zprev_c), 0).x;
        float xcent_yprev_zcent = texelFetch(rh, ivec3(xcent_c, yprev_c, zcent_c), 0).x;
        float xcent_yprev_znext = texelFetch(rh, ivec3(xcent_c, yprev_c, znext_c), 0).x;

        float xcent_ycent_zprev = texelFetch(rh, ivec3(xcent_c, ycent_c, zprev_c), 0).x;
        float xcent_ycent_zcent = texelFetch(rh, ivec3(xcent_c, ycent_c, zcent_c), 0).x;
        float xcent_ycent_znext = texelFetch(rh, ivec3(xcent_c, ycent_c, znext_c), 0).x;

        float xcent_ynext_zprev = texelFetch(rh, ivec3(xcent_c, ynext_c, zprev_c), 0).x;
        float xcent_ynext_zcent = texelFetch(rh, ivec3(xcent_c, ynext_c, zcent_c), 0).x;
        float xcent_ynext_znext = texelFetch(rh, ivec3(xcent_c, ynext_c, znext_c), 0).x;

        
        float xnext_yprev_zprev = texelFetch(rh, ivec3(xnext_c, yprev_c, zprev_c), 0).x;
        float xnext_yprev_zcent = texelFetch(rh, ivec3(xnext_c, yprev_c, zcent_c), 0).x;
        float xnext_yprev_znext = texelFetch(rh, ivec3(xnext_c, yprev_c, znext_c), 0).x;

        float xnext_ycent_zprev = texelFetch(rh, ivec3(xnext_c, ycent_c, zprev_c), 0).x;
        float xnext_ycent_zcent = texelFetch(rh, ivec3(xnext_c, ycent_c, zcent_c), 0).x;
        float xnext_ycent_znext = texelFetch(rh, ivec3(xnext_c, ycent_c, znext_c), 0).x;

        float xnext_ynext_zprev = texelFetch(rh, ivec3(xnext_c, ynext_c, zprev_c), 0).x;
        float xnext_ynext_zcent = texelFetch(rh, ivec3(xnext_c, ynext_c, zcent_c), 0).x;
        float xnext_ynext_znext = texelFetch(rh, ivec3(xnext_c, ynext_c, znext_c), 0).x;


        float average = 0;
        float weightOne = xprev_yprev_zprev + xprev_yprev_znext + xprev_ynext_zprev + xprev_ynext_znext
                        + xnext_yprev_zprev + xnext_yprev_znext + xnext_ynext_zprev + xnext_ynext_znext;
        
        float weightTwo = xprev_yprev_zcent + xprev_ycent_zprev + xprev_ycent_znext + xprev_ynext_zcent
                        + xcent_yprev_zprev + xcent_yprev_znext + xcent_ynext_zprev + xcent_ynext_znext
                        + xnext_yprev_zcent + xnext_ycent_zprev + xnext_ycent_znext + xnext_ynext_zcent;
        weightTwo *= 2.0;

        float weightFour = xprev_ycent_zcent + xcent_yprev_zcent + xcent_ycent_zprev + xcent_ycent_znext
                         + xcent_ynext_zcent + xnext_ycent_zcent;
        weightFour *= 4.0;

        float weightEight = xcent_ycent_zcent;
        weightEight *= 8.0;

        average = (weightOne + weightTwo + weightFour + weightEight)/64.0;

        // imageStore(r2h, texelPos, vec4(average));
        imageStore(r2h, texelPos, vec4((weightOne + weightTwo + weightFour + weightEight)/64.0));
    }
}
